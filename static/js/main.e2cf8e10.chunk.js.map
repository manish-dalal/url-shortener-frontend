{"version":3,"sources":["images/logo.png","Header.jsx","validate.js","APICaller.js","Loading.jsx","Home.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","Header","props","useState","isOpen","setIsOpen","className","Navbar","color","light","expand","NavbarBrand","src","logo","alt","onClick","history","push","NavbarToggler","Collapse","navbar","Nav","NavbarText","withRouter","REGEX","validate","url","test","APICaller","method","reqUrl","data","headers","Accept","ipToken","localStorage","getItem","Date","getTime","toString","setItem","Promise","resolve","reject","a","process","options","toLowerCase","axios","then","response","catch","error","Loading","style","margin","background","display","width","height","viewBox","preserveAspectRatio","cx","cy","fill","stroke","strokeWidth","r","strokeDasharray","transform","attributeName","type","repeatCount","dur","values","keyTimes","Home","expireTime","setexpireTime","seturl","warning","setwarning","loading","setloading","copySuccess","setCopySuccess","textAreaRef","useRef","Alert","length","toggle","href","target","rel","Label","FormGroup","Input","name","value","onChange","event","InputGroup","size","innerRef","InputGroupButtonDropdown","addonType","Button","outline","includes","res","hash","err","message","disabled","e","current","select","document","execCommand","focus","App","path","component","to","Boolean","window","location","hostname","match","ReactDOM","render","basename","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.e2cf8e10.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.79d44bd4.png\";","import React, { useState } from \"react\";\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavbarText\n} from \"reactstrap\";\nimport { withRouter } from \"react-router-dom\";\nimport logo from \"./images/logo.png\";\n\nfunction Header(props) {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggle = () => setIsOpen(!isOpen);\n\n  const moveToHome = () => {\n    props.history.push(\"/\");\n  };\n\n  return (\n    <div className=\"header\">\n      <Navbar color=\"light\" light expand=\"md\">\n        <NavbarBrand>\n          <img src={logo} className=\"image\" alt=\"logo\" onClick={moveToHome} />\n        </NavbarBrand>\n        <NavbarToggler onClick={toggle} />\n        <Collapse isOpen={isOpen} navbar>\n          <Nav className=\"mr-auto\" navbar></Nav>\n          <NavbarText>URL Shortener</NavbarText>\n        </Collapse>\n      </Navbar>\n    </div>\n  );\n}\n\nexport default withRouter(props => <Header {...props} />);\n","const REGEX = /^(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-/]))?/;  \n\nconst validate = url => {\n  return REGEX.test(url);\n};\n\nexport default validate;\n","import axios from \"axios\";\n\nconst apiBaseUrl = process.env.REACT_APP_SERVER_URL;\n\nconst APICaller = ({\n  method = \"get\",\n  reqUrl = \"\",\n  data = {},\n  headers = {\n    \"content-type\": \"application/json\",\n    Accept: \"application/json\"\n  }\n}) => {\n  let ipToken = localStorage.getItem(\"ipToken\");\n  if (!ipToken) {\n    ipToken = \"token\" + new Date().getTime().toString(36);\n    localStorage.setItem(\"ipToken\", ipToken);\n  }\n  headers = { ...headers, ipToken };\n\n  return new Promise(async (resolve, reject) => {\n    let url = `${apiBaseUrl}${reqUrl}`;\n    // console.log(url, \"data\", data, \"method\", method, \"header\", headers);\n    let options = {\n      method,\n      url,\n      data,\n      headers\n    };\n    if (method.toLowerCase() === \"get\") delete options[\"data\"];\n    axios({ ...options })\n      .then(response => {\n        // console.log(\"%c{res}\", \"color: green\", \" => \", response); // eslint-disable-line no-console\n        resolve(response);\n      })\n      .catch(error => {\n        reject(error);\n      });\n  });\n};\nexport default APICaller;\n","import React from \"react\";\n\nexport default function Loading() {\n  return (\n    <svg\n      style={{\n        margin: \"auto\",\n        background: \"rgba(241, 242, 243, 0)\",\n        display: \"block\"\n      }}\n      width=\"30px\"\n      height=\"30px\"\n      viewBox=\"0 0 100 100\"\n      preserveAspectRatio=\"xMidYMid\"\n    >\n      <circle\n        cx={50}\n        cy={50}\n        fill=\"none\"\n        stroke=\"#1d0e0b\"\n        strokeWidth={10}\n        r={35}\n        strokeDasharray=\"164.93361431346415 56.97787143782138\"\n        transform=\"rotate(41.5375 50 50)\"\n      >\n        <animateTransform\n          attributeName=\"transform\"\n          type=\"rotate\"\n          repeatCount=\"indefinite\"\n          dur=\"1s\"\n          values=\"0 50 50;360 50 50\"\n          keyTimes=\"0;1\"\n        />\n      </circle>\n    </svg>\n  );\n}\n","import React, { useState, useRef } from \"react\";\nimport {\n  FormGroup,\n  Input,\n  InputGroup,\n  InputGroupButtonDropdown,\n  Button,\n  Label,\n  Alert\n} from \"reactstrap\";\n\nimport Header from \"./Header\";\nimport validate from \"./validate\";\nimport APICaller from \"./APICaller\";\nimport Loading from \"./Loading\";\n\nconst apiBaseUrl = process.env.REACT_APP_SERVER_URL;\n\nexport default function Home() {\n  const [expireTime, setexpireTime] = useState(-1);\n  const [url, seturl] = useState(\"\");\n  const [warning, setwarning] = useState(\"\");\n  const [loading, setloading] = useState(false);\n  const [copySuccess, setCopySuccess] = useState(\"\");\n  const textAreaRef = useRef(null);\n\n  function onDismiss() {\n    setwarning(\"\");\n  }\n  function onDismissCopy() {\n    setCopySuccess(\"\");\n  }\n  function onChangeInput(event) {\n    setwarning(\"\");\n    setCopySuccess(\"\");\n    seturl(event.target.value);\n  }\n  function handleShorten() {\n    setCopySuccess(\"\");\n    if (!validate(url)) setwarning(\"Please enter valid url\");\n    else if (url.includes(apiBaseUrl)) setwarning(\"URL is already shorten\");\n    else {\n      setloading(true);\n      setwarning(\"\");\n\n      APICaller({\n        method: \"POST\",\n        data: { url, expireTime: expireTime * 60 * 60 }\n      })\n        .then(res => {\n          const { hash = \"\" } = res.data;\n          seturl(`${apiBaseUrl}/${hash}`);\n          setloading(false);\n        })\n        .catch(err => {\n          const {\n            data: { message = \"\" }\n          } = err.response;\n          setloading(false);\n          setwarning(message);\n        });\n    }\n  }\n  function copyToClipboard(e) {\n    setwarning(\"\");\n    textAreaRef.current.select();\n    document.execCommand(\"copy\");\n    // This is just personal preference.\n    // I prefer to not show the the whole text area selected.\n    e.target.focus();\n    setCopySuccess(\"Copied!\");\n  }\n\n  return (\n    <div className=\"Home flex_col\">\n      <Header />\n      <div className=\"body flex_col center\">\n        <Alert\n          color=\"danger\"\n          isOpen={warning.length ? true : false}\n          toggle={onDismiss}\n          className=\"warning-alert\"\n        >\n          {warning}\n        </Alert>\n        <Alert\n          color=\"success\"\n          isOpen={copySuccess.length ? true : false}\n          toggle={onDismissCopy}\n          className=\"warning-alert\"\n        >\n          <h5>{copySuccess}</h5>\n          <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n            {url}\n          </a>\n        </Alert>\n        <div className=\"inputcontainer\">\n          <div className=\"center time_box\">\n            <Label className=\"time_box_label\">URL expiry time</Label>\n            <FormGroup>\n              <Input\n                type=\"select\"\n                name=\"expireTime\"\n                value={expireTime}\n                onChange={event => setexpireTime(event.target.value)}\n              >\n                <option value={1}>1 Hour</option>\n                <option value={6}>6 Hours</option>\n                <option value={12}>12 Hours</option>\n                <option value={24}>24 Hours</option>\n                <option value={-1}>Never</option>\n              </Input>\n            </FormGroup>\n          </div>\n          <InputGroup size=\"lg\">\n            <Input\n              value={url}\n              name=\"url\"\n              innerRef={textAreaRef}\n              onChange={onChangeInput}\n            />\n            <InputGroupButtonDropdown addonType=\"append\">\n              <Button\n                className=\"Input-btn\"\n                outline\n                color=\"primary\"\n                onClick={handleShorten}\n                disabled={loading}\n              >\n                {loading ? <Loading /> : \"Shorten\"}\n              </Button>\n              <Button\n                className=\"Input-btn\"\n                outline\n                color=\"success\"\n                onClick={copyToClipboard}\n                disabled={!url.includes(apiBaseUrl)}\n              >\n                Copy\n              </Button>\n            </InputGroupButtonDropdown>\n          </InputGroup>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Route, Redirect, Switch } from \"react-router-dom\";\n\nimport \"./App.css\";\nimport Home from \"./Home\";\n\nfunction App() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Redirect to=\"/\" />\n    </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n\nReactDOM.render(\n  <HashRouter basename={process.env.REACT_APP_PUBLIC_URL}>\n    <App />\n  </HashRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}